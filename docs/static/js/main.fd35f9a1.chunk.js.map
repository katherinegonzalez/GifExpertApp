{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAiB9C,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAMC,iBAGHJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAMQ,OAAOF,a,+BCPtBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAGFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAIzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAI1Ca,QAAQC,IAAIR,GAlBO,kBAmBZA,GAnBY,4CAAH,sDCEPS,EAAc,SAAC,GAAuB,EAArBN,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OADAa,QAAQC,MAEJ,sBAAKE,UAAU,yCAAf,UACG,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,4BAAIA,QCDFS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECHX,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAiBxC,OAXAC,qBAAU,WACN1B,EAASC,GACJ0B,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACnBjB,KAAMoB,EACNL,SAAS,SAElB,CAAEtB,IAKEuB,EDZ2BK,CAAc5B,GAAlCa,EAFqB,EAE3BN,KAAce,EAFa,EAEbA,QAOtB,OANAP,QAAQC,IAAIM,GAOR,qCACA,oBAAIJ,UAAU,oCAAd,SAAmDlB,IACjDsB,GAAW,mBAAGJ,UAAU,mCAAb,wBACb,qBAAKA,UAAU,YAAf,SACI,6BAEIL,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAESA,GADCA,EAAIC,eEUnBkB,EA9BM,WAAM,MAIa3C,mBAAS,CAAC,cAJvB,mBAIhB4C,EAJgB,KAIJ7C,EAJI,KAWvB,OACI,qCACI,8CACA,uBAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEQ6C,EAAWrB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCnBjC+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.fd35f9a1.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n    const handleInputChange = (event) => {\n        setInputValue(event.target.value);\n    }\n    const handleSubmit = (event) => {\n        event.preventDefault();  // Para prevenir el comportamiento por defecto del form, que en este caso serìa renderizar todo cuando se hace enter, pero no queremos que pase\n        // console.log('Submit hecho');\n\n        if(inputValue.trim().length > 2 ){\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n        \n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={ handleInputChange }\n            />\n\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async ( category ) => {\n        \n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=ehCxuH2BVdfrlfRwY0km2tRg2nwAw4LJ`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    \n    const gifs = data.map(img => {\n\n        // const url = img.images?.downsized_medium.url.replace('http', 'https');\n\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n    console.log(gifs);\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url }) => {\n    console.log();\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n           <img src={ url } alt={ title } />\n           <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\n// useEffect -> me eprmite ejecutar cierto código de manera condicionada.\n\nexport const GifGrid = ({category}) => {\n\n    const { data: images, loading } = useFetchGifs( category );\n    console.log(loading);\n    \n\n\n    \n\n    return (\n        <>\n        <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n        { loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n        <div className=\"card-grid\">\n            <ol>\n            { \n                images.map(img =>\n                    <GifGridItem \n                        key={ img.id }\n                        { ...img } />\n                )\n            }     \n            </ol>\n        </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(()=> {\n        getGifs( category )\n            .then(imgs => setstate({\n                data: imgs,\n                loading: false\n            })); // Los efectos no pueden ser async porque esperan algo síncrono, entonces uso .then\n    }, [ category ]); // Se ejecuta cuando el componente se renderiza por primera vez\n    // Si la category cambia entonces vuelve a ejecutar este efecto. para eso la ponemos enntre los []\n    \n\n\n    return state; // { data: [], loading: true }\n}","import { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nconst GifExpertApp = () => {\n\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball Z'];\n\n    const [categories, setCategories] = useState(['One Punch']);\n\n    /*const handleAdd = () => {\n        // setCategories([...categories, 'HunterXHunter']); ó también se puede:\n        setCategories(cats => [...cats, 'HunterXHunter']);\n    }*/\n\n    return(\n        <>\n            <h2>GifExpertApp</h2>\n            <hr />\n            {/* <button onClick={()=> handleAdd()}>Agregar</button> */}\n            <AddCategory setCategories={setCategories} />\n            <ol>\n                { \n                    categories.map(category =>\n                        <GifGrid \n                            key={category}\n                            category={category} />\n                        )\n                }\n            </ol>\n        </>\n    );\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}